@startuml
skinparam Dpi 70
skinparam shadowing true
skinparam Nodesep 100
skinparam Ranksep 100
skinparam classBackgroundColor #F9F9F9
skinparam classBorderColor #444444
skinparam classArrowColor #555555
skinparam noteBackgroundColor #FFF9C4
skinparam noteBorderColor #E0E0E0
skinparam groupInheritance 1
skinparam defaultFontName "Arial"
skinparam defaultFontSize 14

left to right direction

package "Users" <<Rectangle>> {
    class User {
        - id : Integer
        - name : String
        - email : String
        - birthDate : LocalDate
        - gender : GenderEnum
        - password : String

        + authenticate()
        + changePassword()
        + reportIncident()

        + getId() : Integer
        + setName() : String
        + getName() : String
        + getEmail() : String
        + getBirthDate() : LocalDate
        + setBirthDate(birthDate : LocalDate) : void
        + getGender() : GenderEnum
        + setGender(gender : GenderEnum) : void
        + getPassword() : String
        + getUsername() : String
    }

    class Moderator {
        - phone : String

        + changePassword()
        + getPhone() : String
        + setPhone(phone : String) : void
    }

    class Address {
        - city : String
        - state : String
        - street : String
        - zipCode : String

        + getCity() : String
        + setCity(city : String) : void
        + getState() : String
        + setState(state : String) : void
        + getStreet() : String
        + setStreet(street : String) : void
        + getZipCode() : String
        + setZipCode(zipCode : String) : void
    }

    note right of User
        Represents a system user who can
        authenticate, report incidents,
        and participate in discussions.
    end note
}

package "Social" <<Rectangle>> {
    class BarrierScenario {
        - id : Integer
        - type : AttitudinalBarrierType
        - author : Moderator
        - content : Text
        - title : String
        - creationDate : LocalDate
        - likes : List<User>
        - comments : List<Comment>

        + addComment()
        + addLiker(User : user)
        + getId() : Integer
        + setId(id : Integer) : void
        + getType() : AttitudinalBarrierType
        + setType(type : AttitudinalBarrierType) : void
        + getAuthor() : Moderator
        + setAuthor(author : Moderator) : void
        + getContent() : Text
        + setContent(content : Text) : void
        + getTitle() : String
        + setTitle(title : String) : void
        + getCreationDate() : LocalDate
        + setCreationDate(date : LocalDate) : void
    }

    class Comment {
        - id : Integer
        - dateTime : DateTime
        - content : Text
        - author : User

        + getId() : Integer
        + setId(id : Integer) : void
        + getDateTime() : DateTime
        + setDateTime(dateTime : DateTime) : void
        + getContent() : Text
        + setContent(content : Text) : void
        + getAuthor() : User
        + setAuthor(author : User) : void
    }

    note right of BarrierScenario
        Represents real-world attitudinal
        barrier situations, created by moderators.
    end note

    note right of Comment
        User-generated content that allows
        discussion and replies on scenarios.
    end note
}

class Law {
    - code : String
    - date: String
    - link : String
    - title: String
    - description: Text

    + getCode() : String
    + setCode(code : String) : void
    + getDate() : String
    + setDate(date : String) : void
    + getLink() : String
    + setLink(link : String) : void
    + getTitle() : String
    + setTitle(title : String) : void
    + getDescription() : Text
    + setDescription(description : Text) : void
}

note right of Law
    Legal information relevant to
    attitudinal barriers and rights.
end note

package "Reports" <<Rectangle>> {
    class Report {
        - id : Integer
        - type : AttitudinalBarrierType
        - environment: EnvironmentTypeEnum
        - incidentLocation : Address
        - severity : Integer
        - anonymous : Boolean
        - incidentDetails: Text
        - relatedScenario : BarrierScenario
        - reporter : Optional<User>

        + getId() : Integer
        + getType() : AttitudinalBarrierType
        + setType(type : AttitudinalBarrierType) : void
        + getEnvironment() : EnvironmentTypeEnum
        + setEnvironment(env : EnvironmentTypeEnum) : void
        + getIncidentLocation() : Address
        + setIncidentLocation(loc : Address) : void
        + isAnonymous() : Boolean
        + setAnonymous(anonymous : Boolean) : void
        + getIncidentDetails() : Text
        + setIncidentDetails(details : Text) : void
        + getRelatedScenario() : BarrierScenario
        + setRelatedScenario(scenario : BarrierScenario) : void
        + getReporter() : User
    }




    class ReportReview {
        - description : String
        - date : LocalDate
        - finalStatus : ReportStatus
        - author : Moderator

        + getDescription() : String
        + setDescription(desc : String) : void
        + getDate() : LocalDate
        + getFinalStatus() : ReportStatus
        + setFinalStatus(status : ReportStatus) : void
        + getAuthor() : Moderator
    }

    note right of Report
        Represents a user-submitted complaint
        about a specific barrier incident.
    end note



    note left of ReportReview
        Moderator's evaluation and
        decision on a reported incident.
    end note
}

' Inheritance and relationships
User <|-- Moderator

User "1" -- "n" Report : "submits"

ReportReview "n" -- "1" Moderator : "written by"
ReportReview "n" -* "1" Report : "analyzes"

Comment "n" -- "1" User : "authored by"

Moderator *- Address : "has address"
Moderator "1" -- "0..*" BarrierScenario : "creates"

Report "*" -- "1" BarrierScenario : "describes"
BarrierScenario "1" *-- "0..*" Comment : "has comments"
Law "0..*" -- "0..*" BarrierScenario : "related to"

@enduml
